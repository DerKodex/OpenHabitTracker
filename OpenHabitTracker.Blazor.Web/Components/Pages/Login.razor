@page "/login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using OpenHabitTracker.Blazor.Web.Data

@attribute [ExcludeFromInteractiveRouting]

@layout LoginLayout

@inject NavigationManager NavigationManager
@inject SignInManager<ApplicationUser> SignInManager

<h3>Login</h3>

<EditForm FormName="login" Model="@Input" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary class="alert alert-danger" />

    <div class="mb-3">
        <label for="username" class="form-label">Username:</label>
        <InputText id="username" class="form-control" @bind-Value="Input.Username" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Password:</label>
        <InputText id="password" class="form-control" @bind-Value="Input.Password" type="password" />
    </div>

    <button type="submit" class="btn btn-primary w-100">Log in</button>

    @if (!string.IsNullOrEmpty(loginErrorMessage))
    {
        <div class="alert alert-danger mt-3">
            @loginErrorMessage
        </div>
    }
</EditForm>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private string loginErrorMessage = string.Empty; // To hold the error message

    private async Task HandleValidSubmit()
    {
        // Attempt to sign in with the provided username and password
        var result = await SignInManager.PasswordSignInAsync(Input.Username, Input.Password, isPersistent: true, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            // On successful login, navigate to the home page (or wherever appropriate)
            NavigationManager.NavigateTo("/");
        }
        else
        {
            // Handle login failure: Set the error message
            loginErrorMessage = "Invalid username or password. Please try again.";

            // Optionally, log the reason for the failure or add more detailed handling
            if (result.IsLockedOut)
            {
                loginErrorMessage = "Your account is locked. Please try again later.";
            }
            else if (result.RequiresTwoFactor)
            {
                loginErrorMessage = "Two-factor authentication is required.";
            }
        }
    }

    public class InputModel
    {
        [Required]
        public string Username { get; set; }
        
        [Required]
        public string Password { get; set; }
    }
}
